{"version":3,"sources":["js/globals.js","js/helpers.js","js/app.js"],"names":["container","document","querySelector","resetBtn","colorBtn","eraseBtn","colorObj","color","index","colors","sketch","e","target","className","style","backgroundColor","askForNumGrids","gridSize","prompt","resetContainer","isNaN","makeGridsAppear","parseInt","numGrids","gridArea","gridTemplateRows","gridTemplateColumns","i","cell","createElement","border","appendChild","setColor","changedColor","firstChild","removeChild","erase","changeColor","length","init","window","addEventListener"],"mappings":";AAMA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,SAAA,QAAA,SAAA,QAAA,SAAA,QAAA,eAAA,EALA,IAAMA,EAAYC,SAASC,cAAc,cAKzC,QAAA,UAAA,EAJA,IAAMC,EAAWF,SAASC,cAAc,UAIxC,QAAA,SAAA,EAHA,IAAME,EAAWH,SAASC,cAAc,UAGxC,QAAA,SAAA,EAFA,IAAMG,EAAWJ,SAASC,cAAc,UAExC,QAAA,SAAA,EAAA,IAAMI,EAAW,CACfC,MAAO,GACPC,MAAO,EACPC,OAAQ,CACN,QACA,MACA,QACA,OACA,SACA,SACA,SACA,SAXJ,QAAA,SAAA;;ACuDC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,eAAA,EAAA,QAAA,YAAA,EAAA,QAAA,MAAA,EA7DD,IAAA,EAAA,QAAA,aAGA,SAASC,EAAOC,GACa,SAAvBA,EAAEC,OAAOC,YACXF,EAAEC,OAAOE,MAAMC,gBAAkBT,EAASC,SAAAA,OAI9C,SAASS,IACDC,IAAAA,EAAWC,OAAO,sCACxBC,KAEKC,MAAMH,IAAaA,EAAW,EACjCI,EAAgBC,SAASL,IAGzBI,EAAgB,IAIpB,SAASA,EAAgBE,GACjBC,IAAAA,EAAWD,EAAWA,EAClBT,EAAAA,UAAAA,MAAMW,iBAA6BF,UAAAA,OAAAA,EAA7C,UACUT,EAAAA,UAAAA,MAAMY,oBAAgCH,UAAAA,OAAAA,EAAhD,UACK,IAAA,IAAII,EAAI,EAAGA,EAAIH,EAAUG,IAAK,CAC3BC,IAAAA,EAAO3B,SAAS4B,cAAc,OACpCD,EAAKf,UAAY,OACjBe,EAAKd,MAAMgB,OAAS,mBACVC,EAAAA,UAAAA,YAAYH,IAK1B,SAASI,EAASC,GACP1B,EAAAA,SAAAA,MAAQ0B,EACRnB,EAAAA,SAAAA,MAAMC,gBAAkBkB,EAInC,SAASd,IACAnB,KAAAA,EAAUkC,UAAAA,YACLC,EAAAA,UAAAA,YAAYnC,EAAUkC,UAAAA,YAKpC,SAASE,IACE7B,EAAAA,SAAAA,MAAQ,OAGnB,SAAS8B,IACH/B,EAASE,SAAAA,OAASF,EAASG,SAAAA,OAAO6B,SAC3B9B,EAAAA,SAAAA,MAAQ,GAEnBwB,EAAS1B,EAASG,SAAAA,OAAOH,EAASE,SAAAA,QACzBA,EAAAA,SAAAA,QAEX,SAAS+B,IACPF,IACAhB,EAAgB;;ACjDlB,aAXA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,aAEAmB,OAAOC,iBAAiB,OAAQF,EAAhC,MAEAvC,EAAUyC,UAAAA,iBAAiB,YAAa/B,EAAxC,QAEAP,EAASsC,SAAAA,iBAAiB,QAASzB,EAAnC,gBAEAZ,EAASqC,SAAAA,iBAAiB,QAASJ,EAAnC,aAEAhC,EAASoC,SAAAA,iBAAiB,QAASL,EAAnC","file":"app.ad1978e1.map","sourceRoot":"../src","sourcesContent":["// Global variables:\nconst container = document.querySelector(\".container\");\nconst resetBtn = document.querySelector(\".reset\");\nconst colorBtn = document.querySelector(\".color\");\nconst eraseBtn = document.querySelector(\".erase\");\n\nconst colorObj = {\n  color: \"\",\n  index: 0,\n  colors: [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"orange\",\n    \"purple\",\n    \"yellow\",\n    \"grey\"\n  ]\n};\n\nexport { container, resetBtn, colorBtn, eraseBtn, colorObj };\n","import { container, colorBtn, colorObj } from \"./globals\";\n\n// Helper functions\nfunction sketch(e) {\n  if (e.target.className === \"cell\") {\n    e.target.style.backgroundColor = colorObj.color;\n  }\n}\n\nfunction askForNumGrids() {\n  const gridSize = prompt(\"How many grids per column and row?\");\n  resetContainer();\n  // Need to check if gridSize is also greater than 0 other program acts weird using negative numbers\n  if (!isNaN(gridSize) && gridSize > 0) {\n    makeGridsAppear(parseInt(gridSize));\n  } else {\n    // edge case needed in case user does not enter a valid number\n    makeGridsAppear(16);\n  }\n}\n\nfunction makeGridsAppear(numGrids) {\n  const gridArea = numGrids * numGrids;\n  container.style.gridTemplateRows = `repeat(${numGrids}, 1fr)`;\n  container.style.gridTemplateColumns = `repeat(${numGrids}, 1fr)`;\n  for (let i = 0; i < gridArea; i++) {\n    const cell = document.createElement(\"div\");\n    cell.className = \"cell\";\n    cell.style.border = \".2px solid black\";\n    container.appendChild(cell);\n  }\n}\n\n// This will change the color of the button and sketch\nfunction setColor(changedColor) {\n  colorObj.color = changedColor;\n  colorBtn.style.backgroundColor = changedColor;\n}\n\n// Need to remove children from grid since otherwise the border will stack from the previous call of makeGridsAppear\nfunction resetContainer() {\n  while (container.firstChild) {\n    container.removeChild(container.firstChild);\n  }\n}\n\n// This will mutate the global color variable to be the same as the background color\nfunction erase() {\n  colorObj.color = \"#eee\";\n}\n\nfunction changeColor() {\n  if (colorObj.index >= colorObj.colors.length) {\n    colorObj.index = 0;\n  }\n  setColor(colorObj.colors[colorObj.index]);\n  colorObj.index++;\n}\nfunction init() {\n  changeColor();\n  makeGridsAppear(16);\n}\n\nexport { init, sketch, askForNumGrids, changeColor, erase };\n","import { container, resetBtn, colorBtn, eraseBtn } from \"./globals\";\nimport { init, sketch, askForNumGrids, changeColor, erase } from \"./helpers\";\n\nwindow.addEventListener(\"load\", init);\n\ncontainer.addEventListener(\"mouseover\", sketch);\n\nresetBtn.addEventListener(\"click\", askForNumGrids);\n\ncolorBtn.addEventListener(\"click\", changeColor);\n\neraseBtn.addEventListener(\"click\", erase);\n"]}